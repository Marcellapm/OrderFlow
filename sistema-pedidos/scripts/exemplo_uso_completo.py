from main import SistemaPedidos
import time

def demonstracao_completa():
    """Demonstra√ß√£o completa de todas as funcionalidades"""
    print("üéØ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA")
    print("="*50)
    
    sistema = SistemaPedidos('dados_demo')
    
    print("\n1Ô∏è‚É£ ADICIONANDO PRODUTOS AO SISTEMA")
    print("-" * 30)
    
    produtos_demo = [
        ("Notebook Dell Inspiron", 2500.00, "Eletr√¥nicos", 8),
        ("Mouse Logitech MX", 189.90, "Perif√©ricos", 25),
        ("Teclado Mec√¢nico RGB", 299.99, "Perif√©ricos", 15),
        ("Monitor 27\" 4K", 1299.00, "Eletr√¥nicos", 6),
        ("Webcam Full HD", 199.90, "Perif√©ricos", 12),
        ("SSD 1TB Samsung", 449.90, "Armazenamento", 20)
    ]
    
    for nome, preco, categoria, estoque in produtos_demo:
        sucesso, msg = sistema.adicionar_produto(nome, preco, categoria, estoque)
        print(f"{'‚úÖ' if sucesso else '‚ùå'} {msg}")
    
    print("\n2Ô∏è‚É£ LISTANDO PRODUTOS DISPON√çVEIS")
    print("-" * 30)
    sistema.listar_produtos_disponiveis()
    
    print("\n3Ô∏è‚É£ CRIANDO PEDIDOS V√ÅLIDOS")
    print("-" * 30)
    
    pedidos_teste = [
        (1, 2, "Notebooks para equipe de desenvolvimento"),
        (2, 5, "Mouses para escrit√≥rio"),
        (3, 3, "Teclados para programadores"),
        (5, 2, "Webcams para reuni√µes remotas")
    ]
    
    for produto_id, quantidade, descricao in pedidos_teste:
        sucesso, msg = sistema.criar_pedido(produto_id, quantidade, descricao)
        print(f"{'‚úÖ' if sucesso else '‚ùå'} {msg}")
        time.sleep(0.1)  # Pequena pausa para timestamps diferentes
    
    print("\n4Ô∏è‚É£ TENTANDO PEDIDOS INV√ÅLIDOS")
    print("-" * 30)
    
    # Produto inexistente
    sucesso, msg = sistema.criar_pedido(999, 1, "Produto que n√£o existe")
    print(f"‚ùå {msg}")
    
    # Quantidade maior que estoque
    sucesso, msg = sistema.criar_pedido(4, 10, "Muitos monitores")
    print(f"‚ùå {msg}")
    
    # Quantidade zero
    sucesso, msg = sistema.criar_pedido(1, 0, "Quantidade inv√°lida")
    print(f"‚ùå {msg}")
    
    print("\n5Ô∏è‚É£ LISTANDO PEDIDOS ATIVOS")
    print("-" * 30)
    sistema.listar_pedidos_ativos()
    
    print("\n6Ô∏è‚É£ ATUALIZANDO ESTOQUE")
    print("-" * 30)
    sucesso, msg = sistema.atualizar_estoque(4, 15)  # Aumentar estoque de monitores
    print(f"‚úÖ {msg}")
    
    sucesso, msg = sistema.atualizar_estoque(6, 30)  # Aumentar estoque de SSDs
    print(f"‚úÖ {msg}")
    
    print("\n7Ô∏è‚É£ CRIANDO MAIS PEDIDOS AP√ìS ATUALIZA√á√ÉO")
    print("-" * 30)
    sucesso, msg = sistema.criar_pedido(4, 3, "Monitores ap√≥s reposi√ß√£o")
    print(f"‚úÖ {msg}")
    
    sucesso, msg = sistema.criar_pedido(6, 5, "SSDs para upgrade")
    print(f"‚úÖ {msg}")
    
    print("\n8Ô∏è‚É£ CANCELANDO ALGUNS PEDIDOS")
    print("-" * 30)
    
    # Cancelar pedido #2
    sucesso, msg = sistema.cancelar_pedido(2)
    print(f"‚úÖ {msg}")
    
    # Tentar cancelar pedido inexistente
    sucesso, msg = sistema.cancelar_pedido(999)
    print(f"‚ùå {msg}")
    
    # Tentar cancelar pedido j√° cancelado
    sucesso, msg = sistema.cancelar_pedido(2)
    print(f"‚ùå {msg}")
    
    print("\n9Ô∏è‚É£ VERIFICANDO PEDIDOS ATIVOS AP√ìS CANCELAMENTOS")
    print("-" * 30)
    sistema.listar_pedidos_ativos()
    
    print("\nüîü HIST√ìRICO COMPLETO DE PEDIDOS")
    print("-" * 30)
    sistema.historico_completo()
    
    print("\nüìä ESTAT√çSTICAS FINAIS DO SISTEMA")
    print("-" * 30)
    stats = sistema.obter_estatisticas()
    
    print(f"üì¶ Total de produtos cadastrados: {stats['total_produtos']}")
    print(f"üìà Produtos com estoque dispon√≠vel: {stats['produtos_com_estoque']}")
    print(f"üìã Total de pedidos realizados: {stats['total_pedidos']}")
    print(f"‚úÖ Pedidos ativos: {stats['pedidos_ativos']}")
    print(f"‚ùå Pedidos cancelados: {stats['pedidos_cancelados']}")
    print(f"üí∞ Valor total dos pedidos ativos: R$ {stats['valor_total_pedidos_ativos']:.2f}")
    
    print("\nüéØ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("="*50)
    
    return sistema

if __name__ == "__main__":
    demonstracao_completa()
